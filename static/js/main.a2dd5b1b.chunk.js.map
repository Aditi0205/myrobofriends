{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","OnSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"wOAceA,EAZF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAKC,EAAe,EAAfA,MAAMC,EAAS,EAATA,GAC1B,OACG,yBAAKC,UAAU,qDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACA,4BAAKF,GACL,2BAAIC,MCkBOK,EAvBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEnB,OACQ,6BAGGA,EAAOC,KAAI,SAACC,EAAKC,GAClB,OACP,kBAAC,EAAD,CACDC,IAAOD,EACPR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KACfC,MAAOM,EAAOG,GAAGT,aCENW,EAdG,SAAC,GAAmC,EAAjCC,YAAkC,IAApBC,EAAmB,EAAnBA,aAClC,OACC,yBAAKX,UAAU,OACT,2BACCA,UAAY,mCACZY,KAAQ,SACRC,YAAc,gBACdC,SAAaH,MCCPI,EARA,SAACC,GAChB,OACC,yBAAKC,MAAS,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACrEJ,EAAMK,WCoBOC,E,kDArBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACZC,UAAS,GAHO,E,8DAQAC,EAAMC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK5B,OAAGG,KAAKJ,MAAMC,SACN,iEAEDG,KAAKX,MAAMK,a,GAnBQQ,aCyDbC,G,wDAnDd,aAAc,IAAD,8BACZ,gBAgBDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SAhB1C,EAAKX,MAAQ,CACZnB,OAAQ,GACVM,YAAa,IAJA,E,gEASQ,IAAD,OACnByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAU,EAAKX,SAAS,CAACxB,OAAQmC,S,+BAW/B,IAAD,EACuBZ,KAAKJ,MAA5BnB,EADA,EACAA,OAAOM,EADP,EACOA,YACT8B,EAAiBpC,EAAOqC,QAAQ,SAAAC,GACtC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASlC,EAAYiC,kBAErD,OAAQvC,EAAOyC,OAGF,yBAAK7C,UAAY,MAC5B,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAiBgB,KAAKI,iBAC3B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU3B,OAAUoC,OAP3B,2C,GA9BeX,cCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAE,EAAF,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.a2dd5b1b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name,email,id }) => {\r\n\treturn(\r\n    <div className='tc grow bg-light-red br4 pa3 ma2 dib bw2 shadow-5'>\r\n    <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n    <div> \r\n    <h2>{name}</h2>\r\n    <p>{email}</p>\r\n     </div>\r\n     </div> \r\n);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\t \r\n\treturn (\r\n         <div>\r\n\t          { \r\n\r\n\t          \trobots.map((user,i) => {\r\n\t          return(\r\n\t\t  <Card\r\n\t\t key = {i} \r\n\t\t id={robots[i].id} \r\n\t\t name={robots[i].name}\r\n\t\t  email={robots[i].email} \r\n\t\t  />\r\n\t\t  );\r\n\t      })\r\n\r\n\t\t    }\r\n\t          </div>\r\n\t            \r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst Searchbox = ({ searchfield , searchChange }) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n        <input\r\n         className = 'pa3 ba b--green bg-lightest-blue'\r\n         type =  'search'\r\n         placeholder = 'search robots'\r\n         onChange = { searchChange}\r\n          />\r\n          </div>\r\n\t\t);\r\n}\r\n\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\nreturn (\r\n\t<div style = {{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t{props.children}\r\n    </div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component\r\n{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tcomponentDidCatch(error,info){\r\n    this.setState({ hasError: true})\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oooooopssss......That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n \r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\tsearchfield: ''\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then( users=> { this.setState({robots: users })});\r\n\t}\r\n\r\n \r\n\r\n\tOnSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t\t \r\n\t\t\r\n\t\t}\r\n\t \r\n\trender() {\r\n\t\tconst { robots,searchfield } = this.state;\r\n\t\tconst filteredRobots = robots.filter( robot => {\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t})\r\n\t\treturn !robots.length ?\r\n\t\t\t<h1>Loading</h1> :\r\n\t\t(\r\n               <div className = 'tc'>\r\n\t\t  <h1 className='f1'>RoboFriends</h1>\r\n\t\t  <Searchbox searchChange = { this.OnSearchChange} />\r\n          <Scroll>\r\n          <ErrorBoundary>\r\n          <CardList robots = {filteredRobots} />\r\n          </ErrorBoundary>\r\n          </Scroll>\r\n          </div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\t\r\n\t\t \r\n\t\r\n\r\n \r\n\t\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport *as serviceWorker from './serviceWorker';\nimport 'tachyons';\n   \n\nReactDOM.render(< App />,document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}